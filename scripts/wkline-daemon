#!/usr/bin/env python

from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GObject
from urllib.error import HTTPError
from urllib.request import urlopen
from urllib.parse import urlencode
import dbus
import json
import os
import struct
import threading
import time

WKLINE_FIFO = '/tmp/wkline_fifo'

def fifo_write(payload):
	fd = os.open(WKLINE_FIFO, os.O_RDWR | os.O_NONBLOCK)
	os.write(fd, payload.encode('utf-8'))
	os.close(fd)

def time_split(seconds):
	minutes, seconds = divmod(seconds, 60)
	return (minutes, seconds)

def notification_watcher(run_event):
	def message_cb(bus, msg):
		if msg.get_path_decomposed()[-1] != 'Notifications':
			return

		args = msg.get_args_list()
		try:
			details = args[6]
			urgency = int(details.get('urgency'))
			data_dict = {
				'summary': args[3],
				'body': args[4],
				'category': details.get('category'),
				'urgency_raw': urgency,
				'urgency': ['low', 'normal', 'critical'][urgency],
				'expire': args[7],
			}
		except KeyError:
			return

		json_payload = json.dumps(['notification', data_dict])
		fifo_write(json_payload)

	DBusGMainLoop(set_as_default=True)

	bus = dbus.SessionBus()
	bus.add_match_string("interface='org.freedesktop.Notifications',member='Notify',eavesdrop='true'")
	bus.add_message_filter(message_cb)

def plugin_datetime_updater(run_event):
	while run_event.is_set():
		fifo_write(json.dumps({
			'plugin': {
				'time': time.strftime('%H:%M'),
				'date': time.strftime('%Y-%m-%d'),
			},
		}))
		time.sleep(15)

def plugin_weather_updater(run_event):
	unit = 'celsius'
	temp_conversions = {
		'celsius': lambda temp: temp,
		'fahrenheit': lambda temp: (temp * 9 / 5) + 32,
		'kelvin': lambda temp: temp + 273.15,
	}
	while run_event.is_set():
		location_data = json.loads(urlopen('http://freegeoip.net/json/', timeout=10).read().decode('utf-8'))
		location = ','.join([location_data['city'],
		                     location_data['region_code'],
		                     location_data['country_code']])

		query_data = {
			'q':
			'use "http://github.com/yql/yql-tables/raw/master/weather/weather.bylocation.xml" as we;'
			'select * from we where location="{0}" and unit="c"'.format(location).encode('utf-8'),
			'format': 'json',
		}
		query_url = 'http://query.yahooapis.com/v1/public/yql?' + urlencode(query_data)

		weather_response = json.loads(urlopen(query_url, timeout=10).read().decode('utf-8'))
		condition = weather_response['query']['results']['weather']['rss']['channel']['item']['condition']
		condition_code = int(condition['code'])
		temp = float(condition['temp'])

		fifo_write(json.dumps({
			'plugin': {
				'weather': {
					'icon': condition_code,
					'temp': temp_conversions[unit](temp),
					'unit': unit,
				},
			},
		}))
		time.sleep(600)

def plugin_mpd_updater(run_event):
	from mpd import MPDClient
	client = MPDClient()
	client.timeout = 10
	client.connect('10.0.0.10', 6600)

	while run_event.is_set():
		song = client.currentsong()
		status = client.status()
		time_current = int(float(status.get('elapsed')))
		time_total = int(song.get('time'))
		fifo_write(json.dumps({
			'plugin': {
				'music': {
					'artist': song.get('artist'),
					'title': song.get('title'),
					'time_current': '{}:{:02d}'.format(*time_split(time_current)),
					'time_total': '{}:{:02d}'.format(*time_split(time_total)),
					'time_percent': int(time_current / time_total * 100),
				},
			},
		}))
		time.sleep(5)

	client.close()
	client.disconnect()

if __name__ == '__main__':
	threads = []

	run_event = threading.Event()
	run_event.set()

	for target in [notification_watcher, plugin_datetime_updater, plugin_weather_updater,
				  plugin_mpd_updater]:
		thread = threading.Thread(target=target, args=(run_event,))
		threads.append(thread)
		thread.start()

	loop = GObject.MainLoop()

	try:
		loop.run()
	except KeyboardInterrupt:
		run_event.clear()
		loop.quit()
